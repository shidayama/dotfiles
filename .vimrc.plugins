" -------------------------
" neocomplcache setting
" -------------------------
" 起動時に有効
let g:neocomplcache_enable_at_startup = 1
" ポップアップメニューで表示される候補の数。初期値は100
let g:neocomplcache_max_list = 20
" 自動補完を行う入力数を設定。初期値は2
let g:neocomplcache_auto_completion_start_length = 2
" _区切りの補完を有効化
let g:neocomplcache_enable_underbar_completion = 1
" 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplcache_smart_case = 1
" 大文字小文字を区切りとしたあいまい検索を行う
let g:neocomplcache_enable_camel_case_completion = 0
" 手動補完時に補完を行う入力数を制御
let g:neocomplcache_manual_completion_start_length = 0
let g:neocomplcache_caching_percent_in_statusline = 1
let g:neocomplcache_enable_skip_completion = 1
let g:neocomplcache_skip_input_time = '0.5'
" シンタックスをキャッシュするときの最小文字長を3に
let g:neocomplcache_min_syntax_length = 3
" シンタックス補完を無効に
let g:neocomplcache_plugin_disable = {
      \ 'syntax_complete' : 1,
      \ }
" 補完するためのキーワードパターンを指定
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
" 日本語の収集を停止
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
" ファイルタイプの関連付け
if !exists('g:neocomplcache_same_filetype_lists')
  let g:neocomplcache_same_filetype_lists = {}
endif
" ディクショナリ補完
let g:neocomplcache_dictionary_filetype_lists = {
      \ 'default' : '',
      \ 'php' : $HOME . '/.vim/dict/php.dict',
      \ 'perl' : $HOME . '/.vim/dict/perl.dict',
      \ 'javascript' : $HOME . '/.vim/dict/javascript.dict',
      \ }
" 改行で補完ウィンドウを閉じる
inoremap <expr><CR> neocomplcache#smart_close_popup() . "\<CR>"
" tabで補完候補の選択を行う
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
" C-wで補完ウィンドウを確実に閉じる
inoremap <expr><C-w> neocomplcache#smart_close_popup()."\<C-w>"
" C-yで補完候補の確定
inoremap <expr><C-y> neocomplcache#close_popup()
" C-eで補完のキャンセルしウィンドウを閉じる。ポップアップが開いていないときはEndキー
inoremap <expr><C-e> pumvisible() ? neocomplcache#cancel_popup() : "\<End>"
" スニペットを展開する。スニペットが関係しないところでは行末まで削除
imap <expr><C-g> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : "\<C-o>D"
smap <expr><C-g> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : "\<C-o>D"
" オムニ補完の手動呼び出し
"inoremap <expr><C-Space> neocomplcache#manual_omni_complete()

" Plugin key-mappings.
imap <C-g> <Plug>(neosnippet_expand_or_jump)
smap <C-g> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" -------------------------
" quickrun setting
" -------------------------
" 動作設定
let g:quickrun_config = {}
let g:quickrun_config['_'] = {
\   'runner' : 'vimproc',
\   'runner/vimproc/updatetime' : 40,
\   'outputter' : 'multi:buffer:quickfix',
\   'outputter/buffer/into' : 1,
\   'outputter/buffer/split' : ':botright 15sp',
\   'outputter/buffer/close_on_empty' : 1,
\   'hook/time/enable' : 1,
\   'hook/close_unite_quickfix/enable_hook_loaded' : 1,
\   'hook/unite_quickfix/enable_failure' : 1,
\   'hook/close_quickfix/enable_exit' : 1,
\   'hook/close_buffer/enable_failure' : 1,
\   'hook/close_buffer/enable_empty_data' : 1,
\   'hook/shabadoubi_touch_henshin/enable' : 1,
\   'hook/shabadoubi_touch_henshin/wait' : 20,
\}
let g:quickrun_config['perl'] = {
\   'exec': 'carton exec perl %o %s',
\   'command': 'perl',
\   'cmdopt': '-MProject::Libs',
\}

if exists('b:current_syntax')
  finish
endif
 
if !exists('main_syntax')
  let main_syntax = 'quickrun'
endif
 
syntax case ignore
 
" Python unittest {{{
syntax match ok /\s\(ok\|pass\(ed\|\>\)\)/
syntax match fail /fail\(s\|ed\|ures!\|ures\|ure\|:\|\>\)/
syntax match errors /^error\|\.\serror/
syntax match assert /assertionerror:/
syntax match pyendpass /\s(\d\+\s\(tests\|test\)\spassed)/
syntax match pyendfail /\d\+\s\(failed\(,\|\>\)\|error\)/
 
highlight ok ctermfg=DarkGreen guifg=DarkGreen guibg=White
highlight fail ctermfg=DarkRed guifg=DarkRed guibg=White
highlight errors ctermfg=DarkRed guifg=DarkRed guibg=White
highlight assert ctermfg=DarkRed guifg=DarkRed guibg=White
 
highlight pyendpass ctermfg=DarkGreen guifg=DarkGreen guibg=White
highlight pyendfail ctermfg=DarkRed guifg=DarkRed guibg=White
" }}}
"
" PHP {{{
syntax match phpendpass /(\d\+\stest,\s\d\+\sassertion)/
syntax match phpendfail /tests:\s\d\+,\sassertions:\s\d\+,\s\(failures\|errors\):\s\d\+\(,\s\(failures\|errors\):\s\d\+.\|.\)/
 
highlight phpendpass ctermfg=DarkGreen guifg=DarkGreen guibg=White
highlight phpendfail ctermfg=DarkRed guifg=DarkRed guibg=White
highlight phpbarok ctermfg=DarkGreen guifg=DarkGreen guibg=White
highlight phpbarfail ctermfg=DarkRed guifg=DarkRed guibg=White
" }}}
 
" Perl {{{
syntax match plendfail /\(^result:\sfail\|^failed\s\d\+\/\d\+\ssubtests\|^#\sLooks\slike\syou\sfailed\s\d\+\stest\sof\s\d\+\.\)/
syntax match plendpass /\(^result:\spass\|^all\stests\ssuccessful\.\)/
 
highlight plendpass ctermfg=DarkGreen guifg=DarkGreen guibg=White
highlight plendfail ctermfg=DarkRed guifg=DarkRed guibg=White
highlight plfailstatus ctermfg=DarkRed guifg=DarkRed guibg=White
" }}}
 
" unlet b:current_syntax
let b:current_syntax = 'quickrun'
 
if main_syntax == 'quickrun'
  unlet main_syntax
endif

" 動作終了
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
" 実行
nnoremap <silent> <C-q> :QuickRun<CR>

" -------------------------
" ctrlp setting
" -------------------------
"let g:ctrlp_show_hidden=1

" -------------------------
" tcomment setting
" -------------------------
" デフォルトのキーバインドを変更
let g:tcommentMapLeader1 = '<C-\>'

" -----------------------------------
" Simple-Javascript-Indenter setting
" -----------------------------------
" shiftwidthを1にしてインデント
let g:SimpleJsIndenter_BriefMode = 1
" switchのインデントを補正
let g:SimpleJsIndenter_CaseIndentLevel = -1

" ---------------
" jscomplete-vim
" ---------------
" DOMとMozilla関連とES6のメソッドを補完
let g:jscomplete_use = ['dom', 'moz', 'es6th']

" -------------------------
" NERDtree setting
" -------------------------
" let NERDTreeShowHidden = 1
" autocmd VimEnter * execute 'NERDTree'

" -----------------
" markdown setting
" -----------------
au BufRead,BufNewFile *.md set filetype=markdown

" ----------------
" tweetvim setting
" ----------------
" タイムライン選択用の Unite を起動する
nnoremap <silent> t :Unite tweetvim<CR>
" 発言用バッファを表示する
nnoremap <silent> s           :<C-u>TweetVimSay<CR>
" mentions を表示する
nnoremap <silent> <Space>re   :<C-u>TweetVimMentions<CR>
" 特定のリストのタイムラインを表示する
nnoremap <silent> <Space>tt   :<C-u>TweetVimListStatuses basyura vim<CR>

let g:tweetvim_display_icon = 1
